// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from '@hey-api/client-axios';
import { queryOptions, type UseMutationOptions } from '@tanstack/vue-query';
import { client, getHello, createSale, getUser, getSales, login, createUser } from '../services.gen';
import type { CreateSaleData, CreateSaleError, CreateSaleResponse, GetUserData, LoginData, LoginError, LoginResponse, CreateUserData, CreateUserError, CreateUserResponse } from '../types.gen';
import type { AxiosError } from 'axios';

type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): QueryKey<TOptions>[0] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseURL: client.getConfig().baseURL } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return params;
};

export const getHelloQueryKey = (options?: Options) => [
    createQueryKey("getHello", options)
];

export const getHelloOptions = (options?: Options) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await getHello({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: getHelloQueryKey(options)
}); };

export const createSaleQueryKey = (options: Options<CreateSaleData>) => [
    createQueryKey("createSale", options)
];

export const createSaleOptions = (options: Options<CreateSaleData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await createSale({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: createSaleQueryKey(options)
}); };

export const createSaleMutation = () => { const mutationOptions: UseMutationOptions<CreateSaleResponse, AxiosError<CreateSaleError>, Options<CreateSaleData>> = {
    mutationFn: async (options) => {
        const { data } = await createSale({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const getUserQueryKey = (options: Options<GetUserData>) => [
    createQueryKey("getUser", options)
];

export const getUserOptions = (options: Options<GetUserData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await getUser({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: getUserQueryKey(options)
}); };

export const getSalesQueryKey = (options?: Options) => [
    createQueryKey("getSales", options)
];

export const getSalesOptions = (options?: Options) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await getSales({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: getSalesQueryKey(options)
}); };

export const loginQueryKey = (options: Options<LoginData>) => [
    createQueryKey("login", options)
];

export const loginOptions = (options: Options<LoginData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await login({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: loginQueryKey(options)
}); };

export const loginMutation = () => { const mutationOptions: UseMutationOptions<LoginResponse, AxiosError<LoginError>, Options<LoginData>> = {
    mutationFn: async (options) => {
        const { data } = await login({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const createUserQueryKey = (options: Options<CreateUserData>) => [
    createQueryKey("createUser", options)
];

export const createUserOptions = (options: Options<CreateUserData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await createUser({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: createUserQueryKey(options)
}); };

export const createUserMutation = () => { const mutationOptions: UseMutationOptions<CreateUserResponse, AxiosError<CreateUserError>, Options<CreateUserData>> = {
    mutationFn: async (options) => {
        const { data } = await createUser({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };